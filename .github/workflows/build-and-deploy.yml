name: Build and Deploy WASM Series

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        part:
          - part-01-grundlagen
          # Weitere Teile werden hier hinzugefÃ¼gt:
          # - part-02-bildoptimierung
          # - part-03-pdf-generation
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: ${{ matrix.part }}

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Check if part exists
      run: |
        if [ ! -d "${{ matrix.part }}" ]; then
          echo "Part ${{ matrix.part }} does not exist, skipping"
          exit 0
        fi

    - name: Format check
      working-directory: ${{ matrix.part }}
      run: |
        if [ -f "Cargo.toml" ]; then
          cargo fmt --check
        fi

    - name: Lint check  
      working-directory: ${{ matrix.part }}
      run: |
        if [ -f "Cargo.toml" ]; then
          cargo clippy -- -D warnings
        fi

    - name: Run tests
      working-directory: ${{ matrix.part }}
      run: |
        if [ -f "Cargo.toml" ]; then
          cargo test
        fi

    - name: Build WebAssembly
      working-directory: ${{ matrix.part }}
      run: |
        if [ -f "Cargo.toml" ]; then
          wasm-pack build --target web
          ls -la pkg/ || true
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-build-${{ matrix.part }}
        path: |
          ${{ matrix.part }}/pkg/
          ${{ matrix.part }}/index.html
          ${{ matrix.part }}/README.md

  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create deployment directory
      run: mkdir -p deploy

    - name: Copy main README and files
      run: |
        cp README.md deploy/
        cp TROUBLESHOOTING.md deploy/ || true
        
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wasm-build-*
        path: artifacts
        merge-multiple: false

    - name: Organize artifacts for deployment
      run: |
        # Copy each part to its deployment location
        for artifact in artifacts/*/; do
          part_name=$(basename "$artifact" | sed 's/wasm-build-//')
          echo "Processing $part_name from $artifact"
          
          # Create part directory
          mkdir -p "deploy/$part_name"
          
          # Copy all files from artifact to deployment
          if [ -d "$artifact" ]; then
            # Copy the actual part content
            find "$artifact" -name "*" -type f -exec cp {} "deploy/$part_name/" \;
            
            # Also copy from the original part directory if it exists
            if [ -d "$part_name" ]; then
              cp -r "$part_name"/* "deploy/$part_name/" 2>/dev/null || true
            fi
          fi
        done
        
        # List what we have for debugging
        echo "Deployment structure:"
        find deploy -type f | head -20

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'deploy'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
